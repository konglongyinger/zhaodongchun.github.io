<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[facebook入局加密移动支付领域，我们该怎么应对？]]></title>
    <url>%2F2019%2F06%2F17%2Fmixin1%2F</url>
    <content type="text"><![CDATA[这个月对币圈最大的新闻估计就是facebook即将发币的事，对于此事给我的第一反应就是：国内的移动支付领域的危机已经来临，变革已经开始。 1. 没有硝烟的战争一提到facebook,我们免不了要拿国内的微信进行比对。那么facebook到底有多有钱？数据表明： facebook的用户群体是全球化的，他们来自各个国家。facebook的生态用户规模27亿，2018 整年，Facebook 营收为 558.4 亿美元，其中98%的收入都来自广告，还有2%左右收入来自于第三方应用分成和游戏分成。每月有 27 亿人使用 Facebook 公司旗下的应用。每日使用 Facebook 应用的用户达到 15.2 亿，Facebook 的应用家族包括 Facebook、Instagram、WhatsApp、Facebook Messenger 这几款应用。 对比下微信，分析数据表明： 微信的用户群体大部分是国内用户，微信及海外版WeChat的合并月活跃用户已经达到8.06亿，2018全年，腾讯收入453.28亿美元，其中42.8%收入来自社交及其他广告收入，39.6%收入来自游戏收入，还有25.2%左右收入来自支付和云。2018年微信及WeChat的合并月活跃账户数达到10.82亿。每日使用微信应用的用户达到10.1亿，目前微信支付日交易额已经1700亿，腾讯的应用家族都包括微信、QQ、TIM、DOV。 对比以上数据我们可以看出社交广告一直是国内外超级应用的主要盈利点。facebook的广告收入占比很大，在移动支付上几乎没有市场。但是facebook通过并购几大加密社交应用，获得了加密世界的先发优势。 2. 国内移动支付谁领先？ 走在街上看到这个标签，就有种荣誉感，看到这个就像见了亲人似的，这就是被赞誉为中国新四大发明的移动支付，现在这两个标签已经渗透到方方面面，吃饭，打车，商场购物，坐地铁，交话费，住酒店… 但是现在遇到了挑战者。 虽然目前还习惯信用卡消费的欧美国家，还不太熟悉和经常扫码使用这个标签，但facebook已经在跨境移动支付市场渗透。不远的将来，这个标签也许会和国内的微信支付宝标签一样随处可见。 当机场，出租车，商场，便利店，餐厅，酒吧，医院到处都是它的时候，也许就是超级大国控制金融市场的强有力的表现。 3. 跨国移动支付必要吗？生活在国内的人肯定能体验到这种感觉，“真是太方便了！”。 手机充值，出行打车，餐饮订餐，日常购物… 不知道你们什么情况，反正我是几乎以每日平均扫十次二维码的频率在生活。 而微信的国外用户规模和facebook是无法对比的，在国际移动支付领域还没有发力。但试想下面一个问题： 国内，“地摊”都已经接受移动支付之后，他们是否还会继续停留在支付层面，如果需求进一步被打开，那将是怎么把“煎饼”卖给一个美国人的问题了。 4. 我们是否需要安全聊天？聊天之外我们都在做什么？我们需要加密的聊天吗? 如果你不想发生和我一样的悲剧，请时刻保持警惕，特别是在weixin上聊天。我就在2018年冬至夜里4点发生了资产被盗，损失惨重。真的，有些事情只有亲身体验才知道厉害关系。 就像开车的兄弟姐妹们时刻要注意后面有没有碰瓷的，有数字资产的同志们时刻要注意有没有黑客在盯着你。 除了聊天我们都在干啥？ 不用想都知道： 怎么赚更多的钱 还有人会说：我们聊天不是也是为了赚钱。但是好像聊天也赚不到什么钱。 真是这样，单纯聊天确实不赚钱，除非你是商家卖货的，个人写公众号的。1试想如果一个聊天能赚钱的社交应用存在的话，还会有人使用不能赚钱的应用吗？ 我觉得facebook试图在做这么一个应用，运用“加密+支付”的方法，解决了weixin没解决的问题。 5 . 加密世界的“facebook”和“微信”当下不仅仅是互联网科技公司之间的竞争，加密世界也不平静，最近火热的基于eos网络的Voice的发布和基于Mixing网络的Mixin Message的产生，都是对传统社交巨头的挑战。 这种挑战带有“极客精神” ，丝毫无所畏惧，是彻底的从零开始的变革。 都是社交产品，和facebook和wechat有啥不同，玩过币乎的朋友都了解，区块链的魅力在于激励机制。 不管用户是做什么的，只要发生了用户行为都有奖励，这就是和传统的社交最本质的区别。那么这些新型社交产品能否突破重围，站在传统互联网公司巨头之上，我是看好的，请仔细想象一下： 一种是站在群体组织角度，索取数据再返还利益所得；一种是站在个体用户角度，贡献个人数据获得奖励再共享利益所得. 下面分析下加密世界的社交新玩法。 6. Voice是什么？Voice是一款基于eos区块链的社交Dapp,类比Facebook,最爽的是不管是用户点赞还是转发，都能赚钱，这就是不同。 但是用过区块链产品的都知道，难用，光助记词就够整的，更何况账号密码，私钥什么的，简直是别玩了。Voive预计几个月后就能用了，需要你的耐心等待。 7. Mixin Message是什么？Mixin Mmessage 是一款基于Mixin区块链的社交Dapp,目前已经上线ios和安卓版，使用很爽。它可能是唯一一款能达到百万级应用的区块链产品了。它有以下特点： 彻底解放了区块链的账户概念，无账户概念，私钥，助记词统统不需要，大妈也会用的产品。 国内唯一区块链移动操作系统， 加密聊天 全币种钱包，支持几乎所有的主流公链，你有的币能转过来，你没有的币也能转过来。 网络内转账免费，秒到 内置去中心化交易所Exin，一边聊天，一边交易 对开发者友好，预计正在进行的有几十个项目 打造的是区块链世界的支付宝，可以自由开发数字货币电商，数字货币直播，数字货币租赁等平台。 下周facebook就发币了，你激动不激动，反正我很激动。 预计不久各交易所会多了一个叫Libra的稳定币，到时砸盘拉盘看你的了。 最后推荐一个Minxin上的交易所 Exin，用过的都说不错，手机号注册之后在mixin搜索框中，搜索7000101276，添加联系人，授权登陆即可。 如果是国内苹果用户无法下载的可以用轻聊版mixin message,在下面放一个二维码，如果有需要的可以扫描下载。]]></content>
      <categories>
        <category>区块链经济</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[区块链的虚与实]]></title>
    <url>%2F2018%2F07%2F07%2F6ti2%2F</url>
    <content type="text"><![CDATA[人们正在进行一次社会实践。开始于十年前的比特币。 虚与实就像大陆与海洋。大陆是“实”，海洋是“虚”。 1. 什么是实和虚就像下面的两个点： 实心点和空心点。 2.虚和实的结合“实”是人类认识自然的目的，认识自然是人类生存的需要。 “虚”是人类认识自身的目的，认识自身是人性的需求。 实心节点，会是一个个有作品的人和组织。空心节点，会是一个个停止成长的人和组织。 很多实心节点和空心节点组成一个实中有虚，虚中有实的特殊形态。 3.要做的事情当一个人以开放的心态拥抱世界上的任何人，任何事；当一个人始终以好奇的心态获取世界上的任何人，任何事。才有可能建立有效链接。 链接的两种情况： 实体 虚体 第一种情况，判断的条件就是是否有拿的出手的完整的作品；第二种情况，判断的条件就是是否在浪费时间 4.主动和被动无论结果如何，也许变革比比特币的影响更加长远。 不管你知道还是不知道，我们都在主动或被动的参与一场社会实验，这就是人类协作进化史这一篇。]]></content>
      <categories>
        <category>区块链概念</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[什么是区块链]]></title>
    <url>%2F2018%2F07%2F04%2F6ti1%2F</url>
    <content type="text"><![CDATA[我一直有个问题：区块链链接的是什么，解决的到底是什么社会问题？ 后来我把两个事件放一起联想，一个是比特币的发明，一个是刘慈欣的科幻小说《三体》。 刘慈欣创作的系列长篇科幻小说《三体》，很多人读过，故事讲述的地球人类文明和三体文明的信息交流、生死搏杀及两个文明在宇宙中的兴衰历程。 当2008年一场先源于美国、后蔓延全球的金融危机时 ，中本聪在网络上发表一篇论文《一种点对点的电子现金系统》。因此出现了比特币。 1. 比特币和三体很多人都能理解比特币解决了任何个体之间的信任问题，而三体文明确实也是建立在信任系统之上的文明。 那么是否可以这么假设：现在的地球人类文明是混乱无序的，存在着国家，种族，宗教，语言等等差异，同一种族的聚集起来，形成区域化的世界。社会发展缓慢，科技经济发展滞后，各区域缺乏信任机制，互相制约发展。 是否人类能突破自身限制，通过区块链的信任机制，形成一个无国界的，高效率的三体文明，个体与个体通过点对点信任系统协作。 正如亚当.密斯所说：人类社会的本质是分工协作《国富论》，一个崭新的概念： 最小化的人际协作系统。 各种肤色，各种语言的人为了一件奖励品，形成最小化的协作系统，各自运用所长，各自得到奖励。任务完成，旧的奖励系统消失，新的又在慢慢形成，一切都是自发的，自下而上，自我恢复，自我进化。 2.大同世界的概貌如果我们拉长镜头去观察整个模型，会有一副形象化的场景： 一个螺旋桨之上的弹簧模型，随着螺旋桨的不断转动，弹簧之上的文明不断上升，随着螺旋桨的不断减速，弹簧之上的文明不断下降。 有风和无风只是一个随机事件，不断刺激着构建在螺旋桨之上文明的脉搏。 3 . 有价值意味着有奖励就像互联网是搭建在超链接之上，价值互联网也是搭建在价值链接之上的。 这种社交效率是难以想象的。 每一个人都在为“奖励”而协作，每一个人都不虚度时光。科技将重新焕发光彩。经济将无比繁荣。]]></content>
      <categories>
        <category>区块链概念</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EOS(DAWN3.0)智能合约开发06-创建eos多节点网络]]></title>
    <url>%2F2018%2F04%2F23%2Feos6%2F</url>
    <content type="text"><![CDATA[从02到05篇章我们一直是在本地单节点网络中创建钱包，智能合约。 这篇文章将创建一个多节点单主机的网络，实现两个节点间的通信。 1. 多节点网络概念 一个节点占用一个端口，如果想启动多节点需要使用多个端口 一个节点需要一个账户，如果想启动多节点需要使用多个账户 2. 启动第一个节点开启第一个终端，启动节点，此节点是默认的“eosio”账户，又称为“bios 生产者”。 1nodeos 3. 启动第二个节点1）确认已经设置好钱包API插件文件config.ini 2）启动新节点 12cd ~/eos/build/contracts/eosio.biosnodeos -p leo --plugin eosio::chain_api_plugin --plugin eosio::net_api_plugin --http-server-address 127.0.0.1:8889 --p2p-listen-endpoint 127.0.0.1:9877 --p2p-peer-address 127.0.0.1:9876 --config-dir node2 --data-dir node2 --private-key [\"EOS7kAFTAwFdurP9cMQJ1zd9akvUDPNhpnWUzUrdpjcf6nGMiQuy8\",\"5JM8oznp4ssuTvgFEzj2C98MzkitF64g5NGPTmGu3LdYqXsiJT2\"] 如上图所示，第一个节点在产生区块（generate block），第二节点只是同步区块（push block） 可以看出我们使用03篇创建好的“leo”账户来启动的新节点，”leo”账户owner权限的公私匙请查看03篇。 3) 设置节点2 1cleos push action eosio setprods &quot;&#123; \&quot;version\&quot;: 1, \&quot;producers\&quot;: [&#123;\&quot;producer_name\&quot;: \&quot;leo\&quot;,\&quot;block_signing_key\&quot;: \&quot;EOS7kAFTAwFdurP9cMQJ1zd9akvUDPNhpnWUzUrdpjcf6nGMiQuy8\&quot;&#125;]&#125;&quot; -p eosio@active 通过设置节点，我们将账户为“leo”的第二个节点转变为活跃的生产者。 查看两个运行节点的终端，结果是第一个节点不再生成（generated）区块，变成接收(push)区块并同步；第二个节点不再接收（push）区块并同步，变成生成(generated)区块。 4.获取节点信息1）第一个节点 1cleos --port 8888 get info 结果如下： 12345678&#123; &quot;server_version&quot;: &quot;7b28e59c&quot;, &quot;head_block_num&quot;: 51799, &quot;last_irreversible_block_num&quot;: 51798, &quot;head_block_id&quot;: &quot;0000ca57dbeff449459c61de62486508241e74771e14aa73170db0d3f153c432&quot;, &quot;head_block_time&quot;: &quot;2018-04-24T06:33:52&quot;, &quot;head_block_producer&quot;: &quot;leo&quot;&#125; 2）第二个节点 1cleos --port 8889 get info 结果如下： 12345678&#123; &quot;server_version&quot;: &quot;7b28e59c&quot;, &quot;head_block_num&quot;: 51918, &quot;last_irreversible_block_num&quot;: 51917, &quot;head_block_id&quot;: &quot;0000cace679045d94d6953eac5c2631326f96cfdfc85aaf91cf2064b894b96af&quot;, &quot;head_block_time&quot;: &quot;2018-04-24T06:34:51&quot;, &quot;head_block_producer&quot;: &quot;leo&quot;&#125; 5. 节点重置如何恢复多节点网络到单节点网络，其实不需要重新编译，只需要删除区块链节点数据，配置做下更改即可。 1）在/Library/Application Support/eosio/nodeos/data目录下，将default.wallet文件拷贝出来。 2）定位到Library/Application Support/目录,删除eosio文件夹。 3）定位到Library/Application Support/eosio/nodeos/config目录,打开config.ini文件,通过#标记删除账户历史。1# plugin = eosio::account_history_api_plugin 4） 运行节点1nodeos 重置成功，区块链单节点启动。]]></content>
      <categories>
        <category>EOS智能合约开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EOS(DAWN3.0)智能合约开发05-创建eos智能合约-currency]]></title>
    <url>%2F2018%2F04%2F19%2Feos5%2F</url>
    <content type="text"><![CDATA[03篇我们创建了一个EOS钱包，我们用这个钱包default创建另一个currency账户。 请保持区块链一直运行状态。 1. 查看钱包123cleos wallet opencleos wallet unlockcleos wallet list 2. 创建currency账户1cleos create account eosio currency EOS7kAFTAwFdurP9cMQJ1zd9akvUDPNhpnWUzUrdpjcf6nGMiQuy8 EOS7s4cAmYBWbA5GFSDUXyepSgWYDm9CabBNxjAyuNDTJ3wGe9tvN 3. 查看账户信息1cleos get account currency 4. 部署合约1)检查合约的ABI编码1cleos get code currency 结果为0,见下：1code hash: 0000000000000000000000000000000000000000000000000000000000000000 2)使用账户“currency”部署智能合约,运行指令：1cleos set contract currency ../../contracts/currency 结果如下：123456Reading WAST/WASM from ../../contracts/currency/currency.wast...Assembling WASM...Publishing contract...executed transaction: 385973aa8d4aaecb8988ec56ab3704ad96afc5df3c1daa184a14bd198f5a7345 7136 bytes 2200576 cycles# eosio &lt;= eosio::setcode &#123;&quot;account&quot;:&quot;currency&quot;,&quot;vmtype&quot;:0,&quot;vmversion&quot;:0,&quot;code&quot;:&quot;0061736d010000000189011660000060027e7e0060017...# eosio &lt;= eosio::setabi &#123;&quot;account&quot;:&quot;currency&quot;,&quot;abi&quot;:&#123;&quot;types&quot;:[&#123;&quot;new_type_name&quot;:&quot;account_name&quot;,&quot;type&quot;:&quot;name&quot;&#125;],&quot;structs&quot;:[&#123;&quot;n... 3)再次检查合约的ABI编码1cleos get code currency 结果如下：1code hash: c5dd1da42fd91751ce1af10b49dc7d65bcf42571e2ca5b18c512707fd385d634 不为0代表部署成功。 5. 创建代币(create)1cleos push action currency create &apos;&#123;&quot;issuer&quot;:&quot;currency&quot;,&quot;maximum_supply&quot;:&quot;100000000.0000 CANDY&quot;,&quot;can_freeze&quot;:&quot;0&quot;,&quot;can_recall&quot;:&quot;0&quot;,&quot;can_whitelist&quot;:&quot;0&quot;&#125;&apos; -p currency@active 这里我们创建了一个叫CANDY的代币，总量为100000000.0000 6. 发行代币(issue)1cleos push action currency issue &apos;&#123;&quot;to&quot;:&quot;currency&quot;,&quot;quantity&quot;:&quot;1000000.0000 CANDY&quot;,&quot;memo&quot;:&quot;&quot;&#125;&apos; -p currency@active 这里发行了100万个CANDY，并发送给了currency账户 7. 转账（transfer）1cleos push action currency transfer &apos;&#123;&quot;from&quot;:&quot;currency&quot;,&quot;to&quot;:&quot;leo&quot;,&quot;quantity&quot;:&quot;888.0000 CANDY&quot;,&quot;memo&quot;:&quot;transfer 888 CANDY to leo&quot;&#125;&apos; -p currency@active 这里我们给一个叫leo账户的转账了888.0000CANDY.memo为备忘录,是自定义内容。 8. 查看账户余额12cleos get table currency currency accountscleos get table currency leo accounts]]></content>
      <categories>
        <category>EOS智能合约开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EOS(DAWN3.0)智能合约开发04-创建eos智能合约-hello world]]></title>
    <url>%2F2018%2F04%2F18%2Feos4%2F</url>
    <content type="text"><![CDATA[上篇我们创建了一个EOS钱包，有了钱包我们可以用这个钱包创建一个账户。 请保持区块链一直运行状态。 1. 创建合约定位到eos/build/contracts/目录,新建一个“helloworld”目录,此目录下新建一个“helloworld.cpp”文件.1234cd contractsmkdir helloworldcd helloworldtouch helloworld.cpp 复制下面合约代码到文件中：123456789101112131415#include &lt;eosiolib/eosio.hpp&gt; #include &lt;eosiolib/print.hpp&gt;using namespace eosio; class helloeos : public eosio::contract &#123; public: using contract::contract; void hello(account_name user) &#123; print("Hello world! ", name&#123;user&#125;); &#125; &#125;; EOSIO_ABI(helloeos, (hello)) 2. 编译合约在终端通过eosiocpp命令，生成wast和abi文件 1）编译成wast文件1eosiocpp -o helloworld.wast helloworld.cpp 2）编译成abi文件 1eosiocpp -g helloworld.abi helloworld.cpp 结果目录如下： 3. 部署合约定位到eos/build/contracts/helloworld/目录，使用PW5KTy4QS1vkCtRev1dAgMYRAm8m5x1BncU52CEj2R2Z119YvzZHv解锁钱包，使用账号“leo”部署智能合约,运行指令：1234cd helloworldcleos wallet opencleos wallet unlockcleos set contract leo ../helloworld -p leo 4. 调用合约定位到eos/build/contracts/helloworld/目录，使用push action命令调用合约：1cleos push action leo hello '[leo]' -p leo 智能合约调用成功！ 在部署和调用合约成功后，区块链上也会有相关记录。 通过操作我们知道了EOS智能合约是C++编写的一段程序，智能合约和区块链关系就像寄生。]]></content>
      <categories>
        <category>EOS智能合约开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EOS(DAWN3.0)智能合约开发03-创建eos钱包]]></title>
    <url>%2F2018%2F04%2F18%2Feos3%2F</url>
    <content type="text"><![CDATA[上篇我们启动了EOS区块链，请保持区块链一直运行状态。 先思考一个问题：钱包和区块链是什么关系？ 再思考另外一个问题：智能合约和区块链是什么关系？ 让我们带着疑问继续下面的学习。 1. 创建钱包运行cleos指令：1cleos wallet create 终端显示以下结果： 1234Creating wallet: defaultSave password to use in the future to unlock this wallet.Without password imported keys will not be retrievable.&quot;PW5KTy4QS1vkCtRev1dAgMYRAm8m5x1BncU52CEj2R2Z119YvzZHv&quot; 1）如下目录得到一个default.wallet的文件： 2）区块链网络中相应会多出一条记录： 通过创建钱包，我们知道了区块链发生什么。明白了钱包是写入区块链上的一段程序. 2. 获取公匙/私匙1）打开钱包 1cleos wallet open 2）查看打开的钱包列表1cleos wallet list 3）解锁钱包1cleos wallet unlock password后面粘贴钱包密码：PW5KTy4QS1vkCtRev1dAgMYRAm8m5x1BncU52CEj2R2Z119YvzZHv，解锁。 4）获取公匙/私匙1cleos wallet keys 终端显示以下结果：12345[[ &quot;EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV&quot;, &quot;5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3&quot; ]] 上面的是公钥，下面的是私钥 3. 创建账户1) 使用公匙查看账户信息1cleos get accounts EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV 结果如下：123&#123; &quot;account_names&quot;: []&#125; 2）创建四个密匙 创建第一对公私匙（owner权限）：1cleos create key 结果如下：12Private key: 5JM8oznp4ssuTvgFEzj2C98MzkitF64g5NGPTmGu3LdYqXsiJT2Public key: EOS7kAFTAwFdurP9cMQJ1zd9akvUDPNhpnWUzUrdpjcf6nGMiQuy8 创建第二对公私匙：1cleos create key 结果如下：12Private key: 5Jrnt6nQp6Rqu2MCKhdLfX3nD1ZkNDXYYYeESydKbdx9UXnahioPublic key: EOS7s4cAmYBWbA5GFSDUXyepSgWYDm9CabBNxjAyuNDTJ3wGe9tvN 通过上面命令随机生成四个密匙，记住权限为owner的一对公私钥，如果创建多节点需要。 3）导入到钱包 把两个私钥（privateKey）导入到钱包。12cleos wallet import 5JM8oznp4ssuTvgFEzj2C98MzkitF64g5NGPTmGu3LdYqXsiJT2cleos wallet import 5Jrnt6nQp6Rqu2MCKhdLfX3nD1ZkNDXYYYeESydKbdx9UXnahio 4）创建账户1cleos create account eosio leo EOS7kAFTAwFdurP9cMQJ1zd9akvUDPNhpnWUzUrdpjcf6nGMiQuy8 EOS7s4cAmYBWbA5GFSDUXyepSgWYDm9CabBNxjAyuNDTJ3wGe9tvN 可以看到，账户创建成功。 其中“leo”是我创建的账户名，“eosio”是创建者（bios 生产者）,EOS7kAFTAwFdurP9cMQJ1zd9akvUDPNhpnWUzUrdpjcf6nGMiQuy8EOS7s4cAmYBWbA5GFSDUXyepSgWYDm9CabBNxjAyuNDTJ3wGe9tvN是两个公匙。 5) 查看账户1cleos get account leo 下篇我们创建一个智能合约，看看智能合约又是什么，智能合约和区块链又是什么关系。]]></content>
      <categories>
        <category>EOS智能合约开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EOS(DAWN3.0)智能合约开发02-运行一个eos区块链]]></title>
    <url>%2F2018%2F04%2F18%2Feos2%2F</url>
    <content type="text"><![CDATA[上篇我们学会了怎么下载和编译可执行文件，本篇学会启动区块链 1. 试运行单节点网络定位到eos/build/programs/nodeos目录，执行命令：12cd ~/eos/build/programs/nodeos./nodeos 结果如下： 第一处表示创建了一个nodeos节点文件夹。第二处表示生产者未配置。 在Library/Application Support/目录下会同时生成一个eosio文件夹。此文件夹用来保存区块链节点数据。 接下来设置下配置文件，配置之前ctrl+c先退出网络。 2. 修改配置文件config.ini1）定位到Library/Application Support/eosio/nodeos/config目录,使用vi命令打开config.ini文件：12cd ~/Library/'Application Support'/eosio/nodeos/configvi config.ini 2）配置 先定位到第8行，做以下配置1genesis-json = &quot;/Users/zhaodongchun/Library/Application Support/eosio/nodeos/config/genesis.json&quot; 再定位到第107行，做以下配置 1enable-stale-production = true 最后，在文本底部插入以下代码1234567891011# Enable block production with the testnet producersproducer-name = eosio# Load the block producer plugin, so you can produce blocksplugin = eosio::producer_plugin# Wallet pluginplugin = eosio::wallet_api_plugin# As well as API and HTTP pluginsplugin = eosio::chain_api_pluginplugin = eosio::http_plugin# This will be used by the validation step below, to view account history# plugin = eosio::account_history_api_plugin 3. 运行单节点网络1）终端任意位置运行nodeos指令：1nodeos 至此EOS区块链启动起来了。 2）在不设置配置文件的情况下，终端运行以下指令也可启动单节点网络：1nodeos -e -p eosio --plugin eosio::wallet_api_plugin --plugin eosio::chain_api_plugin --plugin eosio::account_history_api_plugin]]></content>
      <categories>
        <category>EOS智能合约开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[EOS(DAWN3.0)智能合约开发01-下载和编译eos工程（2小时）]]></title>
    <url>%2F2018%2F04%2F18%2Feos1%2F</url>
    <content type="text"><![CDATA[此篇文章即开启一个新的系列：EOS智能合约开发。 对于比特币，以太坊的技术相信大家很熟悉了，但是如果想应用于各行各业对性能的要求就很高，希望通过学习此系列课程，将区块链科技彻底融入我们的生活中。 距离EOS最新版本的项目代码(DAWN 3.0)发布已经12天了，此后文档实现完全基于EOS DAWN3.0,以后不再说明。 系统支持见下图,注意官方建议的macOS版本（MacOS 10.13.x）。 1. 下载定位到电脑根目录，终端运行git clone指令：12cd ~git clone https://github.com/eosio/eos --recursive --depth 1 2. 编译编译的简单方法是运行自动化编译脚本。 确认EOS项目的代码完全下载在本地后，终端继续输入命令：12cd eos./eosio_build.sh 以下结果为成功： 编译完成后，在EOS目录下会出现一个build文件夹。]]></content>
      <categories>
        <category>EOS智能合约开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用框架Hexo在IPFS上搭建个人博客]]></title>
    <url>%2F2018%2F03%2F07%2FIPFS1%2F</url>
    <content type="text"><![CDATA[Hexo+IPFS [Mac环境]IPFS是基于区块链的星际文件系统（IPFS），将博客挂在IPFS的区块链上，不需要折腾服务器，不需要各种配置，只要买个域名就行。Hexo 是一个快速、简洁且高效的博客框架。 1. 配置HEXO1) 安装 Node.js 在安装HEXO前，您必须检查电脑中是否已安装Node.js.用下面命令查询已安装node版本1node --version 2) 安装 HEXO 接下来只需要使用 npm 即可完成 Hexo 的安装12npm install hexo -gnpm install hexo-cli -g 3) 创建本地工作目录 public下创建一个文件夹,如blog-ipfs 12cd ~/public/mkdir blog-ipfs 4) 初始化你的本地站点 然后进入blog-ipfs里安装Hexo 12cd blog-ipfshexo init 5) 生成静态页面1hexo generate 6) 启动服务 启动本地服务，进行文章预览调试1hexo server 浏览器输入http://localhost:4000 浏览器端出现以下页面 2. 自定义网站模版和内容2.1 设置个人模版hexo提供了一个默认模版(上图)，如果想更改成自己喜欢的模版怎么办? 1）先定位到Hexo站点目录下，在终端输入以下命令先下载模版 12cd blog-ipfsgit clone https://github.com/beevesnoodles/hexo-theme-grace.git themes/grace 2）下载完成后，阅读README.md文档，按照文档步骤安装插件12npm install hexo-renderer-sass --savenpm install hexo-generator-feed --save 3）修改配置文件_config.yml中theme属性为theme: grace，启用模版。 4）在终端继续输入以下命令完成模版调试1hexo server --debug 出现Database saved，浏览器里输入 http://localhost:4000/ 查看你的站点了 2.2 使用Atom更改内容如果没有安装atom.先把Atom下载下来，阅读官方文档飞行手册，完成配置。1）终端执行下面命令，用atom打开12cd ~/public/blog-ipfsatom . 2）使用atom修改source文件夹下hello-world.md文件123456---title: 使用框架Hexo在IPFS上搭建个人博客categories: Hexo---![github](http://p3d3seyjq.bkt.clouddn.com/github.png)这是我的第一篇博客！ 3）打开根目录下_config.yml文件，设置语言和昵称，详情阅读Next模版 123456title: LEO&apos;S BLOGsubtitle:description:author: 赵东春language: zh-CNtimezone: 4）调试 1hexo server --debug 浏览器端出现最终页面效果: 5）最后执行下面命令生成静态网页1hexo g 3. 配置IPFS3.1 安装1) 下载，进入IPFS官方下载地址，点击”download go-ipfs”下载压缩包。 2)解压，压缩包解压后得到一个go-ipfs的文件夹，终端打开12cd go-ipfsls 查看文件夹下有五个文件，LICENSE build-log ipfs README.md install.sh 3）安装，用下面命令将其中的ipfs文件移动到文件夹/usr/local/bin中1mv ipfs /usr/local/bin/ipfs 4）测试，是否安装成功12345ipfs helpUSAGE: ipfs - Global p2p merkle-dag filesystem.... 3.2 启动本地IPFS节点1) 先初始化IPFS1ipfs init 2) 用下面命令查看文件是否存在123cd ~/.ipfslsopen ./ 3) 启动节点服务器1ipfs daemon 此时，你可以在http://localhost:5001/webui打开自己的操作台。 3.3 将Hexo博客部署到IPFS节点上Hexo是一个静态博客生成器，执行hexo generate后，会在博客目录生成/Public目录,该目录即为全部博客内容. 1) 终端定位到博客所在public目录，执行ipfs add -r public命令123cd ~/public/blog-ipfsipfs add -r publicadded QmU37Lm3ERhbqgM9DR8By2v8MxDtmWm93NMx5HLeN3DGKY public QmU37Lm3ERhbqgM9DR8By2v8MxDtmWm93NMx5HLeN3DGKY即为博客网站的site_hash,你可以通过任意运行IPFS的节点访问 2) 浏览器访问 https://ipfs.io/ipfs/QmU37Lm3ERhbqgM9DR8By2v8MxDtmWm93NMx5HLeN3DGKY/ 效果如下: 注意：部署到ipfs节点之前，需运行vpn。css丢失不用管，后面一绑定域名，重定向就好了。 3.4 网络同步这步很重要，很多问题，都是因为没有同步造成的，切记：发布IPNS之前要同时开启同步和VPN.1ipfs daemon 3.5 发布到IPNS上1) 发布,需另启一终端12$ ipfs name publish QmU37Lm3ERhbqgM9DR8By2v8MxDtmWm93NMx5HLeN3DGKYPublished to QmPwPhAzoMZ6yVjjSY8rdEqhpuwC4JfohJxTpu2pXop9Yi: /ipfs/QmU37Lm3ERhbqgM9DR8By2v8MxDtmWm93NMx5HLeN3DGKY 2) 验证12$ ipfs name resolve QmPwPhAzoMZ6yVjjSY8rdEqhpuwC4JfohJxTpu2pXop9Yi/ipfs/QmU37Lm3ERhbqgM9DR8By2v8MxDtmWm93NMx5HLeN3DGKY 3) IPNS访问https://ipfs.io/ipns/QmPwPhAzoMZ6yVjjSY8rdEqhpuwC4JfohJxTpu2pXop9Yi/ 4. 绑定独立域名刚好我有一个zhaodongchun.top域名，只需要将zhaodongchun.top解析到上述地址即可。 1) 添加TXT记录为dnslink=/ipns/QmPwPhAzoMZ6yVjjSY8rdEqhpuwC4JfohJxTpu2pXop9Yi 2)添加域名A记录为gateway.ipfs.io 确保vpn和节点服务器启动状态，浏览器输入域名：zhaodongchun.top 5. 更新，优化上面讲的是hexo博客的生成与部署，你可以对Hexo进行进一步的配置和优化，发表新的文章，然后hexo g生成新的public，再通过ipfs add即ipfs publish即可实时更新在线博客。步骤如下,别忘了vpn同时开启。1234ipfs add -r public/ipfs daemonipfs name publish QmU37Lm3ERhbqgM9DR8By2v8MxDtmWm93NMx5HLeN3DGKYipfs name resolve QmPwPhAzoMZ6yVjjSY8rdEqhpuwC4JfohJxTpu2pXop9Yi]]></content>
      <categories>
        <category>IPFS</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[网络爬虫-用web scraper抓取百份白皮书（一）]]></title>
    <url>%2F2018%2F02%2F04%2Fweb%20scraper1%2F</url>
    <content type="text"><![CDATA[一直以来，我一直在想着怎么通过爬虫提高办事效率，可是也仅仅是想想罢了，最近需要几百份白皮书，了解到一款叫web scraper的爬虫工具，可以让普通人不敲代码轻松掌握爬虫技巧，下面我盘点下具体做法 1.下载 Web ScraperWeb Scraper是谷歌Chrome浏览器上的一个插件，你需要电脑上安装有chrome浏览器，且已经翻墙，具体怎么翻墙就不多介绍了，自个看外链吧。如果你已经进入谷歌浏览器，请先点击网页左上角的Apps图标,在弹出的菜单中选择Web Store进入Chrome网上应用商店，在搜索框内输入关键词Web scraper,在列表中选中由Martins Balodist提供的Web Scraper,点击右上角的蓝色按钮添加至CHROME,将其添加进谷歌的扩展程序中后会有个蛛网标志出现在搜索框后面。 2. 打开 Web Scraper快捷键 Ctrl + Shift + I / F12打开开发者工具，找到Web Scraper。建议先进官网,看下Watch the intro video这个视频介绍，虽然是英文中国人也能看懂的，如果照葫芦画瓢跟着视频操作几遍，相信你已拿下它了，下面的内容你不看也会爬虫了。 3. 抓取数据我们以抓取block.cc网站的数据为例,先点击进入网站 3.1 新建Sitemap点击 Create New Sitemap,在弹出的下拉菜单中选择Create sitemap,Sitemap name后面的文本框内输入block，这里是自定义名字，容易记忆就行，我自定义的是要抓取的网站名字，Start URL后面的文本框内输入要抓取的网站入口网址https://block.cc/,最后点击按钮Create Sitemap，这样我们就创建了一个名字为block-cc的网站地图，这是我们想抓取数据的网站入口，也就是起点。 3.2 设置Sitemap在页面最下面找到一个蓝色的按钮Add new selector,点击创建选择器，会弹出来选择器设置页面，有下面几项，我们一一解释 Id ———-这个Id需要自定义，最好定义一个英文名字，原则就是简洁，好记。Type ——-这个类型很重要，其实经常用的就三类：“文本”，”链接”，”元素”Selector —-这个是选择器，第一个按钮Select，当按下时，在网页上点击后出现绿色框。 其实重要的是捋清楚网页结构，搞清除哪些是文本，哪些是链接，哪些是元素，爬虫就很简单了。 1）点击网页最下面的蓝色按钮Add new selector创建一个选择器，Id设置为elemment-box,Type设置为Element, 2）点击Selector后面的Select按钮，鼠标移动到网页中，定位到币种列表下第一项BTC-比特币最右边，是不是出现个绿色框，当如下图所示状态时，代表已经选中此行，点击，第一行变红，继续点击下一行，所有行都变成红色就可以了。 3）点击Done selecting!确认选中目标，字段会自动填充到Selector后面的文本框中 4）勾选上Multiple,最后点击Save selector保存，这样我们的一个选择器就创建成功了。 想想为什么我们创建一个类型为元素的选择器，其实看看网页结构就清楚了，我们要抓取的数据都包裹在一个个容器中，我们需要先抓取容器，共50行，下面抓取每一行内容。 5）确认当前目录为_root/element-box,点击底部的Add new selector按钮，创建一个子集选择器，设置Id为name,Type为Text，当点击选择按钮后，选择名称下面的容器，别选择容器内文本，确认后面字段为span.mgl10,不需要选择multiple,直接Save selector就可以了 6）确认当前目录为_root/element-box,点击底部的Add new selector按钮，创建一个子集选择器，设置Id为num,Type为Text，当点击选择按钮后，选择#下面的容器，别选择容器内文本，确认后面字段为div.col-md-1.col-xs-1,不需要选择multiple,直接Save selector就可以了 7）确认当前目录为_root/element-box,点击底部的Add new selector按钮，创建一个子集选择器，设置Id为name-link,Type为Link，当点击选择按钮后，选择名称下面的容器，确认后面字段为div.col-md-3 a,不需要选择multiple,直接Save selector就可以了 至此，父页面设置好了，下面我们抓取子页面的内容 8）点击BTC-比特币的链接，进入子页面，然后进入name-link目录，在此目录下分别创建web,amout,resum，whitepaper,四个选择集 9）web选择集设置Type为Text，Selector后面字段为p.col-sm-4:nth-of-type(1) a 10）amout选择集设置Type为Text，Selector后面字段为div.col-xs-6 p.num 11）resum选择集设置Type为Text，Selector后面字段为p.break-line-4 12）whitepaper选择集设置Type为Link,Selector后面字段为p.col-sm-4:nth-of-type(6) a 3.3 抓取数据完成上面的设置后，点击Sitemap block的下拉菜单选择scrape,保持延迟为默认2000，点击蓝色按钮Start scraping就开始抓取数据了. 4. 导出数据4.1 导出到Excel表格抓取结束后，点击Sitemap block，从下拉菜单选择Export data as CSV，等待一秒后，点击蓝色的Download now!选择保存路径，我存在了Downloads文件夹下了。 4.2 对数据进行筛选从Finder找到Downloads文件夹下的block.csv文件，右键选择Numbers打开，删掉不需要的列，仅保留需要的列，最后我们可以用Numbers右上角的Sort&amp;Filter,点击Add a Column,选择num排序,这样就和网站列表次序一致了，结果见下图]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[使用框架Hexo在Github上搭建个人博客]]></title>
    <url>%2F2018%2F01%2F26%2FHexo%2F</url>
    <content type="text"><![CDATA[Hexo+Github [Mac环境] 假如你有一个Github帐号，我们就可以开始了，如果你说没有，就去注册好了。想想咱们注册微信时也不是很难的事吧，准备好一个邮箱就行了，真的别的都不需要。 1. 配置远程和本地Github1.1 在 Github 上创建一个仓库（Repo）登陆Github网址，用你的账号登陆进去，点右上角的+，弹出菜单选择New repository,在弹出的Repository name下面的文本框内按照yourname.github.io 这种格式输入，然后选中 Public, 最后点击绿色的Create repository创建成功。 重新登陆，点右上角你的头像，在弹出的菜单中选中Your profile,会发现“youname.github.io”分支创建成功，点击进去，在右边找到Settings,在左侧栏最下面找到Deploy keys,点击Add deploy key,输入你的”key”,密匙的求解过程请参见Git密匙,至此你的远程仓库部分已经配置完成。 如果你对git很感兴趣，或者，对git的命令行方式很头疼的，可以阅读此物: Git入门教材 ⚠️我的git仓库名字为zhaodongchun.github.io,你的就用你自己的名字好了. 1.2 确认本地已经安装好 git 和 npm在终端输入下面两条命令，确认已经安装好git和npm,如果电脑还没装这两个东西的，请参照官方文档安装：Git入门教材+npm中文文档 12git --versionnpm --version 2. 配置Hexo 1） 安装 hexo 先通读官方文档hexo自动部署网站,不需要看内容，快速翻一遍知道有这个工具在这里就可以了，以后需要时再调用它。然后终端输入以下命令12npm install hexo -gnpm install hexo-cli -g 2） 创建本地工作目录 先登陆到github，点击你的分支yourname.github.io,在右边有个绿色的按钮Clone or download,点开后点击copy to clipboard把自己的git地址拷贝出来，在终端cd到你希望把站点放置的位置，下面我cd到Desktop了 12cd ~/Desktopgit clone https://github.com/zhaodongchun/zhaodongchun.github.io.git 3）初始化你的本地站点 12345hexo init yourname.github.iocd yourname.github.ionpm install hexo-deployer-git --savehexo generatehexo server 在终端打完以上命令后，如果最后显示Database saved，代表本地站点已经初始化完成，可以终端里按住ctrl的同时点击http://localhost:4000/查看你的站点了，需要注意的是这个效果是hexo默认模版landscape的效果，下面我们学学怎么更换模版为Next模版。 4）设置个人模版 这里涉及两个东西，一个是Hexo,一个是Next,我们先到Hexo模版，先看看都有哪些模版可供我们选择，如果你点击模版下面的大标题名字后会进入到github的源文件地址，和创建本地工作目录一样，可以把它的Git地址拷贝出来。先以next模版为例，先定位到Hexo站点目录下，在终端输入以下命令安装 12cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/next 安装完成后，修改配置文件_config.yml中的 theme 字段为 next后保存，至此我们完成了站点配置。在终端继续输入以下命令完成模版调试，如果再此出现Database saved，代表本地站点已经初始化完成，可以终端里按住ctrl的同时点击http://localhost:4000/查看你的站点了 1hexo server --debug 5） 使用Atom码文章 先把Atom下载下来，官网直接下载安装或在终端输入下面命令也可以，如果对Atom还不熟悉没关系，先从官方文档开始逐渐建立Atom语法吧，在线阅读:飞行手册 给 Atom 安装一个命令行面板，Atom 里同时按command+，调出setting面板，定位到install选项，在文本框中搜索platformio-ide-terminal后点击install安装atom包，安装完成后按command+shift+t在下面会出现一个终端，这个包的作用就是解决总是来回切换atom和终端的问题。 完成上面的操作后，我们对包大概有了个概念，下面继续安装一个markdown包，点击Atom菜单下的Preference的左侧倒数第二项+ install，输入markdown，依次安装几个包 markdown-scroll-synclinter-markdownmarkdown-writermarkdown-tocmarkdown-pdfmarkdown-preview 然后就是随便折腾一会，看看这几个都实现什么功能，接下来用markdown书写文章的过程中会经常使用这几个包/Desktop/zhaodongchun.github.io/zhaodongchun.github.io,这是我的目前位置，你可以在mac终端输入ls查看你是否在根路径下，然后终端输入atom .在atom中打开所有文件，然后使用快捷键command+shift+t打开atom终端，mac的终端就可以关闭了，在左侧栏定位到source文件夹下的_posts文件夹，展开后有一个hello-world.md文件，这个文件就是网站上看到的源文件。我们用一下刚才掌握的几个快捷键试试 command+w 关闭当前标签command+shift+m 终端ctrl+shift+m 预览 “&gt;” 块引用 “-” 任务列表“0.” 有序列表 快捷键熟悉差多了，再回去翻翻Next模版，设置下站点配置文件和主题配置文件，设置语言和你的昵称，基本上博客就可以了，保存后在终端输入下面调试命令,如果再此出现Database saved，代表本地站点已经初始化完成，可以在浏览器输入http://localhost:4000/查看你的站点了。 1hexo server --debug 3. 部署到 Github 上把本地文件上传到github远程前，我们需要告诉atom上传到的路径，先登陆github，进入zhaodongchun.github.io这个分支，点击绿色的clone or download按钮拷贝出来路径，再进入atom，左侧根目录会有一个_config.yml文件，下面我们设置下这个配置文件，先把拷贝出来的路径粘贴到url后面，注意截止到/,将root后面改成你的github上的仓库一样，repo后面的直接把你拷贝出来的粘贴就行了，注意:后面的空格不要少，这样atom就知道上传给谁了。 url: https://github.com/konglongyinger/zhaodongchun.github.io/ root: /zhaodongchun.github.io deploy: type: git repo: https://github.com/konglongyinger/zhaodongchun.github.io.git 修改完成后保存，在atom终端输入下面命令，在github上查看上传结果，如果发现文件已经显示，就可以进入github你的分支下的settings，往下翻找到GitHub Pages这里，将source下的None改为master branch,点击保存后，会出现绿色的一条提示Your site is published at https://konglongyinger.github.io/zhaodongchun.github.io/，后面链接就是你的网址了，现在你可以点击看看效果。 1hexo deploy 4. 调试网站 如果每次在本地修改文章，可以用下面命令调试预览 1hexo s --debug 如果改动了配置文件，在上传到github前最好使用清理命令，清除public目录 1hexo clean 如果完成阶段性任务了可以用下面命令上传到github 1hexo deploy 5. 域名绑定首先你的有个域名，举例来说我是从百度买的，有了域名后再分三步走。 1） 配置CNAME 在hexo文件夹下的source中新建一个文本文档， 里边输入刚才我们买到的域名的二级域名。举例来说，我申请的是zhaodongchun.com，就填写zhaodongchun.com,然后保存为CNAME.注意大写的CNAME. 2） 配置解析服务器 接下来进域名服务商的后台进行域名解析设置,添加CNAME记录类型，解析线路默认就好了，记录值为zhaodongchun.github.io,配置好后我们本地重新上传到github。 3） 配置站点设置文件重定向 还记得我们没有绑定域名之前设置的配置文件吗，绑定域名后需要重新设置下url和root,否则css有可能会丢失，将其设置回默认，如下设置： url: https://zhaodongchun.comroot: / 4）好，到此为止，重新执行下面命令将文件上传到github，浏览器输入你的域名就可以正常登陆了。 123hexo cleanhexo ghexo d]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
</search>
